{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 18.034, 368.29999999999995, MM, 1.6666666666666667)\nhDrive = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nflyWheelMotorA = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nflyWheelMotorB = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\nflyWheel = MotorGroup(flyWheelMotorA, flyWheelMotorB)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\nhDrive_needs_to_be_stopped_controller_1 = False\ndirectionMod = 1\nflyWheelToggle = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, hDrive_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            # strafe = axis4\n            drivetrain_left_side_speed = directionMod*(controller_1.axis3.position()) + controller_1.axis1.position()\n            drivetrain_right_side_speed = directionMod*(controller_1.axis3.position()) - controller_1.axis1.position()\n            hDrive_speed = directionMod*(controller_1.axis4.position())\n            \n            # check if the value is inside of the deadband range\n            if hDrive_speed < 5 and hDrive_speed > -5:\n                # check if the h-drive has already been stopped\n                if hDrive_needs_to_be_stopped_controller_1:\n                    # stop the h-drive\n                    hDrive.stop()\n                    # tell the code that the h-drive has been stopped\n                    hDrive_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the h-drive next\n                # time the input is in the deadband range\n                hDrive_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the h-drive to spin if the values are not in the deadband range\n            if hDrive_needs_to_be_stopped_controller_1:\n                hDrive.set_velocity(hDrive_speed, PERCENT)\n                hDrive.spin(FORWARD)\n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            if flyWheelToggle:\n                flyWheel.set_velocity(100, PERCENT)\n                flyWheel.spin(FORWARD)\n            else:\n                flyWheel.stop()\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n\ndef switchDirections():\n    global directionMod\n    directionMod *= -1\n\ndef toggleFlyWheel():\n    global flyWheelToggle\n    flyWheelToggle = not flyWheelToggle\n    if flyWheelToggle:\n        controller_1.rumble(\"-.-.\")\n\ncontroller_1.buttonY.pressed(switchDirections)\ncontroller_1.buttonA.pressed(toggleFlyWheel)\n\ndrivetrain.set_drive_velocity(100, PERCENT)\ndrivetrain.set_turn_velocity(100, PERCENT)\ndrivetrain.set_stopping(BRAKE)\nhDrive.set_velocity(100, PERCENT)\nhDrive.set_stopping(BRAKE)","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[1,11,2,12,null],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"10:6","direction":"rev","gyroType":"none","width":"0.71","unit":"in","wheelbase":"14.5","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[3],"name":"hDrive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}